from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import HumanMessage
from config import API_KEY

from tools.analyse_rapport.save_report_tool import save_report_tool
from tools.analyse_rapport.send_email_alert_tool import send_email_alert_tool

from pymongo import MongoClient
import pandas as pd

# üîÅ Initialisation LLM + outils
llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash-preview-05-20",
    google_api_key=API_KEY,
    temperature=0.3
)

memory = MemorySaver()

tools = [save_report_tool, send_email_alert_tool]

agent_executor = create_react_agent(
    llm,
    tools,
)

# ‚ñ∂Ô∏è Lancement de l‚Äôagent exploratoire autonome
def run_exploratory_agent():
    print("üìä Agent exploratoire (react_agent) lanc√©...")

    try:
        # 1. Charger les transcriptions d√©j√† analys√©es
        collection = MongoClient()["audioTranscripts"]["audioTranscripts"]
        docs = list(collection.find({}, {"_id": 0}))
        df = pd.DataFrame(docs)

        if df.empty:
            print("‚ùå Aucun appel disponible pour analyse.")
            return {"rapport": "vide"}

        # 2. Construire le prompt
        prompt = f"""
Tu es un agent data analyst expert chez Orange Maroc.

Voici les transcriptions brutes des appels clients :

{df['transcription'].dropna().tolist()[:5]}

Ta mission :
1. R√©dige un rapport d‚Äôanalyse exploratoire en markdown clair et synth√©tique.
2. Appelle ensuite le tool pour sauvegarder ce rapport dans MongoDB qu‚Äôune seule fois 
juste apr√®s avoir r√©dig√© le rapport..
3. Si tu d√©tectes un probl√®me critique (churn √©lev√©, r√©clamation r√©p√©t√©e,incidents graves...), envoye un mail 
avec un message clair d‚Äôalerte pour l‚Äô√©quipe.
"""

        result = agent_executor.invoke({
            "messages": [HumanMessage(content=prompt)],
            "configurable": {"thread_id": "rapport_exploratoire"},
        })

        print("‚úÖ Rapport exploratoire g√©n√©r√© + tools ex√©cut√©s.")
        return result

    except Exception as e:
        print(f"‚ùå Erreur dans run_exploratory_agent : {str(e)}")
        return {"error": str(e)}
