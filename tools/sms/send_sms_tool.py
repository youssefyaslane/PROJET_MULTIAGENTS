from langchain_core.tools import tool
from pydantic import BaseModel, Field
from twilio.rest import Client
from pymongo import MongoClient
from config import TWILIO_SID, TWILIO_TOKEN, TWILIO_FROM

# ‚úÖ Initialisation des clients au niveau module (une seule fois)
try:
    twilio_client = Client(TWILIO_SID, TWILIO_TOKEN)
    client_mongo = MongoClient("mongodb://localhost:27017/")
    col_audio_infos = client_mongo["audioClient"]["audioInfos"]
    print("‚úÖ Clients Twilio et MongoDB initialis√©s avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur initialisation clients: {e}")

# ‚úÖ D√©finition du sch√©ma d'entr√©e
class SendSMSInput(BaseModel):
    nom_audio: str = Field(..., description="Nom du fichier audio trait√©")
    sms_text: str = Field(..., description="Texte du SMS √† envoyer au client")

@tool(args_schema=SendSMSInput)
def send_sms_tool(nom_audio: str, sms_text: str) -> str:
    """
    Envoie un SMS via Twilio et met √† jour MongoDB avec le statut 'sms': 'done'.
    Le num√©ro du client est r√©cup√©r√© depuis MongoDB √† partir du nom du fichier audio.
    """
    try:
        print(f"üîç Recherche du document pour: {nom_audio}")
        
        # üìÑ Recherche du document
        doc = col_audio_infos.find_one({"nom_audio": nom_audio})
        if not doc:
            error_msg = f"‚ùå Aucun document trouv√© avec nom_audio = {nom_audio}"
            print(error_msg)
            return error_msg

        num = doc.get("num")
        if not num:
            error_msg = f"‚ùå Num√©ro de t√©l√©phone manquant pour {nom_audio}"
            print(error_msg)
            return error_msg

        # ‚úÖ V√©rification si SMS d√©j√† envoy√©
        if doc.get("sms") == "done":
            warning_msg = f"‚ö†Ô∏è SMS d√©j√† envoy√© pour {nom_audio}."
            print(warning_msg)
            return warning_msg

        print(f"üì≤ Tentative d'envoi SMS √† {num}")
        print(f"üìù Contenu: {sms_text}")

        # üì≤ Envoi du SMS
        message = twilio_client.messages.create(
            body=sms_text,
            from_=TWILIO_FROM,
            to=num
        )

        print(f"‚úÖ SMS envoy√© avec succ√®s, SID: {message.sid}")

        # üíæ Mise √† jour MongoDB
        update_result = col_audio_infos.update_one(
            {"nom_audio": nom_audio},
            {"$set": {
                "sms": "done",
                "sms_text": sms_text,
                "sms_sid": message.sid
            }}
        )

        if update_result.modified_count > 0:
            success_msg = f"‚úÖ SMS envoy√© √† {num} pour {nom_audio} et base mise √† jour."
            print(success_msg)
            return success_msg
        else:
            warning_msg = f"‚ö†Ô∏è SMS envoy√© mais erreur mise √† jour base pour {nom_audio}"
            print(warning_msg)
            return warning_msg

    except Exception as e:
        error_msg = f"‚ùå Erreur lors de l'envoi du SMS : {str(e)}"
        print(error_msg)
        return error_msg